name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build project
        run: npm run build

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version $VERSION"

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          
      - name: Create tarball
        run: npm pack

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to HEAD"
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" --no-merges "$PREVIOUS_TAG"..HEAD)
          fi
          
          # Format changelog for GitHub release
          FORMATTED_CHANGELOG=$(cat <<EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          \`\`\`bash
          npm install @mcp/wordpress-server@${{ steps.version.outputs.VERSION }}
          \`\`\`
          
          ## Full Changelog
          
          ${PREVIOUS_TAG:+$PREVIOUS_TAG...}v${{ steps.version.outputs.VERSION }}
          EOF
          )
          
          # Save to file for GitHub release
          echo "$FORMATTED_CHANGELOG" > RELEASE_NOTES.md
          echo "changelog_generated=true" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          files: |
            *.tgz
            build/**/*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            *.tgz
            RELEASE_NOTES.md

  publish-github-packages:
    name: Publish to GitHub Packages
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package version
        run: npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version

      - name: Configure npm for GitHub Packages
        run: |
          echo "@${GITHUB_REPOSITORY_OWNER}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}